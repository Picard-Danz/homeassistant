#################################################################
## Templates
#################################################################

      ##########################################################
      ## Prusa MK3 State
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_status
      name: Prusa MK3 Status
      state: "{{ state_attr('sensor.prusa_mk3_telemetry', 'state')['text'] if is_state('sensor.prusa_mk3_telemetry', 'OK') else None }}"

      ##########################################################
      ## Prusa MK3 Nozzle Temperature
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_nozzle_temp
      name: Prusa MK3 Nozzle Temperature
      device_class: temperature
      state: "{{ state_attr('sensor.prusa_mk3_telemetry', 'telemetry')['temp-nozzle'] if is_state('sensor.prusa_mk3_telemetry', 'OK') else None }}"

      ##########################################################
      ## Prusa MK3 Bed Temperature
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_bed_temp
      name: Prusa MK3 Heatbed Temperature
      device_class: temperature
      state: "{{ state_attr('sensor.prusa_mk3_telemetry', 'telemetry')['temp-bed'] if is_state('sensor.prusa_mk3_telemetry', 'OK') else None }}"

      ##########################################################
      ## Prusa MK3 Print File
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_print_file
      name: Prusa MK3 Print File
      state: "{{ state_attr('sensor.prusa_mk3_job_status', 'job')['file']['name'] if is_state('sensor.prusa_mk3_job_status', 'Printing') else None }}"

      ##########################################################
      ## Prusa MK3 Progress
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_progress
      name: Prusa MK3 Progress
      unit_of_measurement: "%"
      state: "{{ state_attr('sensor.prusa_mk3_job_status', 'progress')['completion'] | float * 100 if is_state('sensor.prusa_mk3_job_status', 'Printing') else 0 }}"

      ##########################################################
      ## Prusa MK3 Print Start
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_print_start
      name: Prusa MK3 Print Start
      state: >-
        {% set etime = state_attr('sensor.prusa_mk3_job_status', 'progress')['printTime'] | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {% if days > 0 %}{{ days }}d {% endif %}{% if hours > 0 %}{{ hours }}h {% endif %}{% if minutes > 0 %}{{ minutes }}m{% endif %}

      ##########################################################
      ## Prusa MK3 Print Finish
      ##########################################################

  - sensor: 
    - unique_id: prusa_mk3_print_finish
      name: Prusa MK3 Print Finish
      state: >-
        {% set etime = state_attr('sensor.prusa_mk3_job_status', 'progress')['printTimeLeft'] | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {% if days > 0 %}{{ days }}d {% endif %}{% if hours > 0 %}{{ hours }}h {% endif %}{% if minutes > 0 %}{{ minutes }}m{% endif %}

      ##########################################################
      ## Electricity Rate
      ##########################################################

  - sensor:
    - unique_id: current_electricity_rate
      name: Current Electricity Rate
      unit_of_measurement: "USD/kWh"
      device_class: monetary
      state: >
        {% if is_state('select.monthly_electric', 'Summer Rate') %}
          {{ 0.1296 }}
        {% elif is_state('select.monthly_electric', 'Winter Rate First 750') %}
          {{ 0.0REDACTED1 }}
        {% elif is_state('select.monthly_electric', 'Winter Rate Over 750') %}
          {{ 0.0591 }}
        {% endif %}

      ##########################################################
      ## Hot Tub Modes
      ##########################################################

  - sensor:
    - unique_id: hot_tub_mode
      name: Hot Tub Mode
      state: >
        {% if states('sensor.hot_tub_watts') | float > 10300 %}
          CircPump-Blower-Pump1-Pump2-Heat
        {% elif states('sensor.hot_tub_watts') | float > 9700 %}
          CircPump-Pump1-Pump2-Heat
        {% elif states('sensor.hot_tub_watts') | float > 8110 %}
          CircPump-Blower-Pump1-Heat
        {% elif states('sensor.hot_tub_watts') | float > 7990 %}
          CircPump-Blower-Pump2-Heat
        {% elif states('sensor.hot_tub_watts') | float > 7600 %}
          CircPump-Pump1-Heat
        {% elif states('sensor.hot_tub_watts') | float > 7500 %}
          CircPump-Pump2-Heat
        {% elif states('sensor.hot_tub_watts') | float > 5650 %}
          CircPump-Blower-Heat
        {% elif states('sensor.hot_tub_watts') | float > 5300 %}
          CircPump-Heat
        {% elif states('sensor.hot_tub_watts') | float > 5170 %}
          CircPump-Blower-Pump1-Pump2
        {% elif states('sensor.hot_tub_watts') | float > 4750 %}
          CircPump-Pump1-Pump2
        {% elif states('sensor.hot_tub_watts') | float > 2930 %}
          CircPump-Blower-Pump1
        {% elif states('sensor.hot_tub_watts') | float > 2630 %}
          CircPump-Blower-Pump2
        {% elif states('sensor.hot_tub_watts') | float > 2500 %}
          CircPump-Pump1
        {% elif states('sensor.hot_tub_watts') | float > 2380 %}
          CircPump-Pump2
        {% elif states('sensor.hot_tub_watts') | float > 500 %}
          CircPump-Blower
        {% elif states('sensor.hot_tub_watts') | float > 150 %}
          CircPump
        {% else %}
          Off
        {% endif %}

    ##########################################################
    ## Hot Tub Circulation Pump
    ##########################################################

  - binary_sensor:
    - unique_id: hot_tub_circ_pump
      name: Hot Tub Circ Pump
      state: >
        {% if is_state('sensor.hot_tub_mode', 'Off') %}
          off
        {% else %}
          on
        {% endif %}

      ##########################################################
      ## Hot Tub Pump 1
      ##########################################################

  - binary_sensor:
    - unique_id: hot_tub_pump_1
      name: Hot Tub Pump 1
      state: >
        {{ is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2-Heat')
          or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Pump2-Heat')
          or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Heat')
          or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Heat')
          or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2')
          or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Pump2')
          or is_state('bsensor.hot_tub_mode', 'CircPump-Blower-Pump1') 
          or is_state('sensor.hot_tub_mode', 'CircPump-Pump1') }}
        
      ##########################################################
      ## Hot Tub Pump 2
      ##########################################################

  - binary_sensor:
    - unique_id: hot_tub_pump_2
      name: Hot Tub Pump 2
      state: >
        {{ is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Pump2')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump2') 
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump2') }}


      ##########################################################
      ## Hot Tub Air Blower
      ##########################################################

  - binary_sensor:
    - unique_id: hot_tub_air_blower
      name: Hot Tub Air Blower
      state: >
        {{ is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump2') 
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower') }}

      ##########################################################
      ## Hot Tub Heater
      ##########################################################

  - binary_sensor:
    - unique_id: hot_tub_heater
      name: Hot Tub Heater
      state: >
        {{ is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump1-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump1-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Pump2-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Blower-Heat')
           or is_state('sensor.hot_tub_mode', 'CircPump-Heat') }}

      ##########################################################
      ## UPS - A
      ##########################################################

  - sensor:
    - unique_id: ups_a_battery_runtime_mins
      name: UPS A Battery Runtime Mins
      unit_of_measurement: "Minutes"
      state: “{{ ( states('sensor.ups_a_battery_runtime') | int / 60 ) | round(0) }}”

      ##########################################################
      ## UPS - B
      ##########################################################

  - sensor:
    - unique_id: ups_b_battery_runtime_mins
      name: UPS B Battery Runtime Mins
      unit_of_measurement: "Minutes"
      state: “{{ ( states('sensor.ups_b_battery_runtime') | int / 60 ) | round(0) }}”

      ##########################################################
      ## Washing Machine Time Remaining
      ##########################################################

  - sensor:
    - unique_id: washing_machine_time_remaining
      name: Washing Machine Time Remaining
      state: '{{ states.sensor.washer.attributes.remain_time }}'

      ##########################################################
      ## Washing Machine Error Message
      ##########################################################

  - sensor:
    - unique_id: washer_error
      name: Washer Error
      state: '{{ states.sensor.washer.attributes.error_message }}'

      ##########################################################
      ## Washing Machine Tub Clean Count
      ##########################################################

  - sensor:
    - unique_id: washer_tub_clean
      name: Washer Tub Clean
      state: '{{ states.sensor.washer.attributes.tubclean_count }}'

      ##########################################################
      ## Washer Tub Clean
      ##########################################################

  - binary_sensor:
    - unique_id: washer_tub_clean_on
      name: Washer Tub Clean On
      device_class: problem
      state: "{{ states('sensor.washer_tub_clean')|float > 29 }}"

      ##########################################################
      ## Dryer Time Remaining
      ##########################################################

  - sensor:
    - unique_id: dryer_time_remaining
      name: Dryer Time Remaining
      state: '{{ states.sensor.dryer.attributes.remain_time }}'

      ##########################################################
      ## Dryer Error Message
      ##########################################################

  - sensor:
    - unique_id: dryer_error
      name: Dryer Error
      state: '{{ states.sensor.dryer.attributes.error_message }}'

      ##########################################################
      ## Calendars
      ##########################################################

  - sensor:
    - unique_id: holidays_calendar
      name: Holiday Calendar
      state: '{{ states.calendar.holidays_in_united_states.attributes.message }}'

      ##########################################################
      ## Thermostat
      ##########################################################

  - sensor:
    - unique_id: thermostat_climate_mode
      name: Thermostat Climate Mode
      state: '{{ states.climate.main_floor.attributes.preset_mode }}'

      ##########################################################
      ## Outdoor Humidity
      ##########################################################

  - sensor:
    - unique_id: REDACTED_humidity
      name: REDACTED Humidity
      device_class: humidity
      unit_of_measurement: '%'
      state: '{{ states.weather.REDACTED.attributes.humidity }}'

      ##########################################################
      ## Outdoor Temperature
      ##########################################################

  - sensor:
    - unique_id: REDACTED_temperature
      name: REDACTED Temperature
      device_class: temperature
      unit_of_measurement: '°F'
      state: '{{ states.weather.REDACTED.attributes.temperature }}'

      ##########################################################
      ## Server Uptime
      ##########################################################

  - sensor:
    - unique_id: server_uptime
      name: Server Uptime
      state: >
         {% set lb = states('sensor.last_boot') %}
         {% if lb != 'unknown' %}
            {% set seconds = (as_timestamp(now()) - as_timestamp(lb))|int %}
            {% set days = (seconds / 86400)|int %}
            {% set seconds = seconds % 86400 %}
            {% set hours = (seconds / 3600)|int %}
            {% set seconds = seconds % 3600 %}
            {% set minutes = (seconds / 60)|int %}
            {% set seconds = seconds % 60 %}
            {% if hours == 0 and minutes == 0 %}
              {{ time }} seconds
            {% else %}
              {%- if days > 0 -%}
                {%- if days == 1 -%}
                  1 day
                {%- else -%}
                  {{ days }} days
                {%- endif -%}
              {%- endif -%}
              {%- if hours > 0 and days < 7 -%}
                {%- if days > 0 -%}
                  {{ ', ' }}
                {%- endif -%}
                {%- if hours == 1 -%}
                  1 hour
                {%- else -%}
                  {{ hours }} hours
                {%- endif -%}
              {%- endif -%}
              {%- if days == 0 and minutes > 0 -%}
                {%- if hours > 0 -%}
                  {{ ', ' }}{{ minutes }} min
                {%- else -%}
                  {%- if minutes == 1 -%}
                    1 minute
                  {%- else -%}
                    {{ minutes }} minutes
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {% endif %}
          {% else %}
            unknown
          {% endif %}

       ##########################################################
       ## Sump Pump Status
       ##########################################################

  - binary_sensor:
    - unique_id: sump_pump_status
      name: Sump Pump Status
      delay_on:
        seconds: 1
      delay_off:
        seconds: 1
      state: >
        '{{ states('sensor.sump_pump_switch_electric_consumed_w')| int >= 1  }}'

       ##########################################################
       ## Water Flow
       ##########################################################

  - binary_sensor:
    - unique_id: water_flow_status
      name: "Water Flow Status"
      state: >-
        {{ states('sensor.water_meter_current') != "0" }}

       ##########################################################
       ## USER1's Office Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: USER1_office_echo_timer
      name: "USER1's Office Timer"
      state: >-
        {{ states('sensor.USER1_s_office_echo_show_next_timer') != "unknown" }}

       ##########################################################
       ## Basement Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: basement_echo_timer
      name: "Basement Timer"
      state: >-
        {{ states('sensor.basement_echo_next_timer') != "unknown" }}

       ##########################################################
       ## Bathroom Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: bathroom_echo_timer
      name: "Bathroom Timer"
      state: >-
        {{ states('sensor.bathroom_echo_next_timer') != "unknown" }}

       ##########################################################
       ## Bathroom Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: bedroom_echo_timer
      name: "Bedroom Timer"
      state: >-
        {{ states('sensor.bedroom_echo_spot_next_timer') != "unknown" }}

       ##########################################################
       ## Bathroom Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: craft_room_echo_timer
      name: "Craft Room Timer"
      state: >-
        {{ states('sensor.craft_room_echo_next_timer') != "unknown" }}

       ##########################################################
       ## Dining Room Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: dining_room_echo_timer
      name: "Dining Room Timer"
      state: >-
        {{ states('sensor.dining_room_echo_next_timer') != "unknown" }}

       ##########################################################
       ## Fitness Room Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: fitness_room_echo_timer
      name: "Fitness Room Timer"
      state: >-
        {{ states('sensor.fitness_room_echo_next_timer') != "unknown" }}

       ##########################################################
       ## Guest Bedroom Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: guest_bedroom_echo_timer
      name: "Guest Bedroom Timer"
      state: >-
        {{ states('sensor.guest_bedroom_echo_dot_next_timer') != "unknown" }}

       ##########################################################
       ## Kitchen Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: kitchen_echo_timer
      name: "Kitchen Timer"
      state: >-
        {{ states('sensor.kitchen_echo_show_next_timer') != "unknown" }}

       ##########################################################
       ## Living Room Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: living_room_echo_timer
      name: "Living Room Timer"
      state: >-
        {{ states('sensor.living_room_echo_next_timer') != "unknown" }}

       ##########################################################
       ## USER2's Office Echo Timer
       ##########################################################

  - binary_sensor:
    - unique_id: USER2_office_echo_timer
      name: "USER2's Office Timer"
      state: >-
        {{ states('sensor.USER2_s_office_echo_next_timer') != "unknown" }}